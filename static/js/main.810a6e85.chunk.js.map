{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","query","URLSearchParams","window","location","search","center","get","split","zoom","courier","client","centerRoad","mappedCenter","latitude","longtitude","mappedZoom","mappedCourier","mappedClient","zoomCenterProps","console","log","className","MapContainer","style","width","height","scrollWheelZoom","whenCreated","map","fitBounds","TileLayer","attribution","url","Marker","position","Popup","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAyFeA,MA/Ef,WAAgB,IAAD,MAIPC,EAAQ,IAAIC,gBAAgBC,OAAOC,SAASC,QAE5CC,EAA4B,UAAGL,EAAMM,IAAI,iBAAb,aAAG,EAAqBC,MAAM,KAC1DC,EAAsBR,EAAMM,IAAI,QAChCG,EAA6B,UAAGT,EAAMM,IAAI,kBAAb,aAAG,EAAsBC,MAAM,KAC5DG,EAA4B,UAAGV,EAAMM,IAAI,iBAAb,aAAG,EAAqBC,MAAM,KAC1DI,EAA4BX,EAAMM,IAAI,cAExCM,EAAyBP,EACzB,CAAEQ,UAAWR,EAAO,GAAIS,YAAaT,EAAO,IAC5C,CAAEQ,SAAU,UAAWC,WAAY,WACjCC,EAAqBP,GAAQA,EAAO,GACpCQ,EAAiCP,EACnC,CAAEI,UAAWJ,EAAQ,GAAIK,YAAaL,EAAQ,IAC9C,KACEQ,EAAgCP,EAClC,CAAEG,UAAWH,EAAO,GAAII,YAAaJ,EAAO,IAC5C,KAEEQ,EACW,SAAfP,EACI,CACEN,OAAQ,CAACO,EAAaC,SAAUD,EAAaE,YAC7CN,KAAMO,GAER,KAaN,OAXAI,QAAQC,IAAR,aACO,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAuBH,WAAxB,OAAoCI,QAApC,IAAoCA,OAApC,EAAoCA,EAAsBJ,WAC/D,cAEFM,QAAQC,IAAR,aAEI,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAuBF,aAAxB,OAAsCG,QAAtC,IAAsCA,OAAtC,EAAsCA,EAAsBH,aAE9D,gBAIA,qBAAKO,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,yBACEC,MAAO,CAAEC,MAAO,QAASC,OAAQ,UAC7BP,GAFN,IAGEQ,iBAAiB,EACjBC,YAAa,SAACC,GAAS,IAAD,QACD,SAAfjB,GAAyBK,GAAiBC,GAC5CW,EAAIC,UAAU,CACZ,kBAACb,QAAD,IAACA,OAAD,EAACA,EAAeH,gBAAhB,QAA4B,EAA5B,iBAA+BG,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAeF,kBAA9C,QAA4D,GAC5D,kBAACG,QAAD,IAACA,OAAD,EAACA,EAAcJ,gBAAf,QAA2B,EAA3B,iBAA8BI,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAcH,kBAA5C,QAA0D,MARlE,UAYE,cAACgB,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAELhB,EACC,cAACiB,EAAA,EAAD,CAAQC,SAAU,CAAClB,EAAcH,SAAUG,EAAcF,YAAzD,SACE,eAACqB,EAAA,EAAD,mCACuB,uBADvB,6BAIA,KACHlB,EACC,cAACgB,EAAA,EAAD,CAAQC,SAAU,CAACjB,EAAaJ,SAAUI,EAAaH,YAAvD,SACE,eAACqB,EAAA,EAAD,mCACuB,uBADvB,6BAIA,YCrEGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.810a6e85.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet\";\n\nexport interface Position {\n  latitude: number;\n  longtitude: number;\n}\n\nfunction App() {\n  // localhost:3000?center=50.049683,19.944544&zoom=13&courier=50.0717929,19.9304276&client=50.1006913,19.8827967&centerRoad=true\n  // localhost:3000?center=50.049683,19.944544&zoom=13&courier=50.008,20.013&client=50,20&centerRoad=true\n\n  const query = new URLSearchParams(window.location.search);\n\n  const center: string[] | undefined = query.get(\"center\")?.split(\",\");\n  const zoom: string | null = query.get(\"zoom\");\n  const courier: string[] | undefined = query.get(\"courier\")?.split(\",\");\n  const client: string[] | undefined = query.get(\"client\")?.split(\",\");\n  const centerRoad: string | null = query.get(\"centerRoad\");\n\n  let mappedCenter: Position = center\n    ? { latitude: +center[0], longtitude: +center[1] }\n    : { latitude: 50.049683, longtitude: 19.944544 };\n  const mappedZoom: number = zoom ? +zoom : 13;\n  const mappedCourier: Position | null = courier\n    ? { latitude: +courier[0], longtitude: +courier[1] }\n    : null;\n  const mappedClient: Position | null = client\n    ? { latitude: +client[0], longtitude: +client[1] }\n    : null;\n\n  const zoomCenterProps: any =\n    centerRoad !== \"true\"\n      ? {\n          center: [mappedCenter.latitude, mappedCenter.longtitude],\n          zoom: mappedZoom,\n        }\n      : null;\n\n  console.log(\n    `%c${(mappedCourier as any)?.latitude - (mappedClient as any)?.latitude}`,\n    \"color: red\"\n  );\n  console.log(\n    `%c${\n      (mappedCourier as any)?.longtitude - (mappedClient as any)?.longtitude\n    }`,\n    \"color: green\"\n  );\n\n  return (\n    <div className=\"App\">\n      <MapContainer\n        style={{ width: \"100vw\", height: \"100vh\" }}\n        {...zoomCenterProps}\n        scrollWheelZoom={false}\n        whenCreated={(map) => {\n          if (centerRoad === \"true\" && mappedCourier && mappedClient)\n            map.fitBounds([\n              [mappedCourier?.latitude ?? 0, mappedCourier?.longtitude ?? 0],\n              [mappedClient?.latitude ?? 0, mappedClient?.longtitude ?? 0],\n            ]);\n        }}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {mappedCourier ? (\n          <Marker position={[mappedCourier.latitude, mappedCourier.longtitude]}>\n            <Popup>\n              A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n          </Marker>\n        ) : null}\n        {mappedClient ? (\n          <Marker position={[mappedClient.latitude, mappedClient.longtitude]}>\n            <Popup>\n              A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n          </Marker>\n        ) : null}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}